\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

module NaturalsAddition where

open import SpartanMLTT hiding (_+_)

infixl 31 _+_

_+_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
n + 0 = n
n + (succ m) = succ(n + m)


n-plus-zero-equals-n : (n : ‚Ñï) ‚Üí n + 0 ‚â° n
n-plus-zero-equals-n n = refl

zero-plus-n-equals-n : (n : ‚Ñï) ‚Üí 0 + n ‚â° n
zero-plus-n-equals-n = induction base step
  where base : 0 + 0 ‚â° 0
        base = refl

        step : (n : ‚Ñï) ‚Üí 0 + n ‚â° n ‚Üí 0 + succ n ‚â° succ n
        step n IH = goal
          where lemma‚ÇÄ : 0 + succ n ‚â° succ (0 + n)
                lemma‚ÇÄ = refl

                lemma‚ÇÅ : succ (0 + n) ‚â° succ n
                lemma‚ÇÅ = ap succ IH

                goal : 0 + succ n ‚â° succ n
                goal = lemma‚ÇÄ ‚àô lemma‚ÇÅ


addition-associativity : (l n m : ‚Ñï) ‚Üí (l + n) + m ‚â° l + (n + m)
addition-associativity l n = induction base step
  where base : (l + n) + 0 ‚â° l + (n + 0)
        base = goal
          where lemma‚ÇÄ : (l + n) + 0 ‚â° l + n
                lemma‚ÇÄ = refl

                lemma‚ÇÅ : l + n ‚â° l + (n + 0)
                lemma‚ÇÅ = refl

                goal : (l + n) + 0 ‚â° l + (n + 0)
                goal = lemma‚ÇÄ ‚àô lemma‚ÇÅ

        step : (m : ‚Ñï) ‚Üí (l + n) + m ‚â° l + (n + m) ‚Üí
                          (l + n) + succ m ‚â° l + (n + succ m)
        step m IH = goal
          where lemma‚ÇÄ : (l + n) + succ m ‚â° succ ((l + n) + m)
                lemma‚ÇÄ = refl

                lemma‚ÇÅ : succ ((l + n) + m) ‚â° succ (l + (n + m))
                lemma‚ÇÅ = ap succ IH

                lemmaùüö : succ (l + (n + m)) ‚â° l + succ (n + m)
                lemmaùüö = refl

                lemma‚ÇÉ : l + succ (n + m) ‚â° l + (n + succ m)
                lemma‚ÇÉ = refl

                goal : (l + n) + succ m ‚â° l + (n + succ m)
                goal = lemma‚ÇÄ ‚àô lemma‚ÇÅ ‚àô lemmaùüö ‚àô lemma‚ÇÉ

addition-commutativity : (n m : ‚Ñï) ‚Üí n + m ‚â° m + n
addition-commutativity n = induction base step
  where base : n + 0 ‚â° 0 + n
        base = n-plus-zero-equals-n n ‚àô (zero-plus-n-equals-n n)‚Åª¬π

        step : (m : ‚Ñï) ‚Üí n + m ‚â° m + n ‚Üí n + succ m ‚â° succ m + n
        step m IH = goal
          where lemma‚ÇÄ : (k : ‚Ñï) ‚Üí succ k ‚â° 1 + k
                lemma‚ÇÄ = induction base‚ÇÄ step‚ÇÄ
                  where base‚ÇÄ : succ 0 ‚â° 1 + 0
                        base‚ÇÄ = refl

                        step‚ÇÄ : (k : ‚Ñï) ‚Üí succ k ‚â° 1 + k ‚Üí
                                           succ (succ k) ‚â° 1 + (succ k)
                        step‚ÇÄ k IH' = goal‚ÇÄ
                          where lemma‚ÇÄ' : 1 + (succ k) ‚â° succ (1 + k)
                                lemma‚ÇÄ' = refl

                                lemma‚ÇÅ' : succ (1 + k) ‚â° succ (succ k)
                                lemma‚ÇÅ' = ap succ (IH' ‚Åª¬π)

                                goal‚ÇÄ : succ (succ k) ‚â° 1 + (succ k)
                                goal‚ÇÄ = (lemma‚ÇÄ' ‚àô lemma‚ÇÅ')‚Åª¬π

                lemma‚ÇÅ : n + succ m ‚â° succ (n + m)
                lemma‚ÇÅ = refl

                lemma‚ÇÇ : succ (n + m) ‚â° succ (m + n)
                lemma‚ÇÇ = ap succ IH

                lemma‚ÇÉ : succ (m + n) ‚â° 1 + (m + n)
                lemma‚ÇÉ = lemma‚ÇÄ (m + n)

                lemma‚ÇÑ : 1 + (m + n) ‚â° (1 + m) + n
                lemma‚ÇÑ = (addition-associativity 1 m n)‚Åª¬π

                lemma‚ÇÖ : (1 + m) + n ‚â° succ m + n
                lemma‚ÇÖ = ap (Œª - ‚Üí - + n) ((lemma‚ÇÄ m)‚Åª¬π)

                goal : n + succ m ‚â° succ m + n
                goal = lemma‚ÇÅ ‚àô lemma‚ÇÇ ‚àô lemma‚ÇÉ ‚àô lemma‚ÇÑ ‚àô lemma‚ÇÖ


trivial-addition-rearrangement : (x y z : ‚Ñï) ‚Üí x + y + z ‚â° x + z + y
trivial-addition-rearrangement x y z =
        addition-associativity x y z ‚àô ap (Œª - ‚Üí x + -) (addition-commutativity y z) ‚àô (addition-associativity x z y)‚Åª¬π

\end{code}
