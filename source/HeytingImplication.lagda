\section{Preamble}

\begin{code}

{-# OPTIONS --without-K --safe #-}

open import Universes
open import SpartanMLTT
open import UF-Base
open import UF-PropTrunc
open import UF-FunExt
open import Sigma

module HeytingImplication
         (pt : propositional-truncations-exist)
         (fe : Fun-Ext)
         where

open import Frame pt fe
open import GaloisConnection pt fe
open import UF-Subsingletons

open import UF-Subsingleton-Combinators

open AllCombinators pt fe
open PropositionalTruncation pt

open import AdjointFunctorTheoremForFrames pt fe

is-heyting-implication-of : (L : frame ùì§ ùì• ùì¶) ‚Üí ‚ü® L ‚ü© ‚Üí ‚ü® L ‚ü© √ó ‚ü® L ‚ü© ‚Üí  Œ© (ùì§ ‚äî ùì•)
is-heyting-implication-of L z (x , y) =
 ‚±Ø w ‚à∂ ‚ü® L ‚ü© , ((w ‚àß[ L ] x) ‚â§[ poset-of L ] y) ‚Üî (w ‚â§[ poset-of L ] z)

is-heyting-implication-operation : (L : frame ùì§ ùì• ùì¶)
                                 ‚Üí (‚ü® L ‚ü© ‚Üí ‚ü® L ‚ü© ‚Üí ‚ü® L ‚ü©)
                                 ‚Üí Œ© (ùì§ ‚äî ùì•)
is-heyting-implication-operation L _==>_ =
 ‚±Ø x ‚à∂ ‚ü® L ‚ü© , ‚±Ø y ‚à∂ ‚ü® L ‚ü© , is-heyting-implication-of L (x ==> y) (x , y)

modus-ponens : (L : frame ùì§ ùì• ùì¶) {x y z : ‚ü® L ‚ü©}
             ‚Üí is-heyting-implication-of L z (x , y) holds
             ‚Üí ((z ‚àß[ L ] x) ‚â§[ poset-of L ] y) holds
modus-ponens L {x} {y} {z} p = pr‚ÇÇ (p z) (‚â§-is-reflexive (poset-of L) z)
 where
  open PosetReasoning (poset-of L)

module HeytingImplicationConstruction (L : frame ùì§  ùì•  ùì•)
                                      (ùí∑ : has-basis L holds) where

\end{code}

\begin{code}

 L‚Çö = poset-of L

 open GaloisConnectionBetween
 open AdjointFunctorTheorem L ùí∑ L

 ‚àß-right-preserves-joins : (x : ‚ü® L ‚ü©)
                         ‚Üí (is-join-preserving L L (meet-of L x)) holds
 ‚àß-right-preserves-joins = distributivity L

 meet-right-is-monotonic : (x : ‚ü® L ‚ü©) ‚Üí is-monotonic L‚Çö L‚Çö (meet-of L x) holds
 meet-right-is-monotonic x = scott-continuous-implies-monotone L L (meet-of L x) ŒΩ
  where
   ŒΩ : is-scott-continuous L L (meet-of L x) holds
   ŒΩ = join-preserving-implies-scott-continuous L L (meet-of L x) (‚àß-right-preserves-joins x)

 meet-right‚Çò : ‚ü® L ‚ü© ‚Üí L‚Çö ‚îÄm‚Üí L‚Çö
 meet-right‚Çò x = (Œª y ‚Üí x ‚àß[ L ] y) , meet-right-is-monotonic x

 _==>_ : ‚ü® L ‚ü© ‚Üí ‚ü® L ‚ü© ‚Üí ‚ü® L ‚ü©
 _==>_ x = pr‚ÇÅ (pr‚ÇÅ (aft-backward (meet-right‚Çò x) (‚àß-right-preserves-joins x)))

 ==>-is-heyting-implication : is-heyting-implication-operation L _==>_ holds
 ==>-is-heyting-implication x y w = Œ≤ , Œ≥
  where
   open PosetReasoning (poset-of L)

   œà = aft-backward (meet-right‚Çò x) (‚àß-right-preserves-joins x)

   Œ≤ : ((w ‚àß[ L ] x) ‚â§[ poset-of L ] y ‚áí w ‚â§[ poset-of L ] (x ==> y)) holds
   Œ≤ p = pr‚ÇÅ (pr‚ÇÇ œà w y) (x ‚àß[ L ] w   ‚â°‚ü® ‚àß[ L ]-is-commutative x w ‚ü©‚Çö
                          w ‚àß[ L ] x   ‚â§‚ü® p ‚ü©
                          y            ‚ñ†)

   ‚Ä† : ((x ‚àß[ L ] (x ==> y)) ‚â§[ poset-of L ] y) holds
   ‚Ä† = pr‚ÇÇ (pr‚ÇÇ œà (x ==> y) y) (‚â§-is-reflexive (poset-of L) (x ==> y))

   Œ≥ : (w ‚â§[ poset-of L ] (x ==> y) ‚áí (w ‚àß[ L ] x) ‚â§[ poset-of L ] y) holds
   Œ≥ p = w ‚àß[ L ] x            ‚â§‚ü® ‚àß[ L ]-left-monotone p            ‚ü©
         (x ==> y) ‚àß[ L ] x    ‚â°‚ü® ‚àß[ L ]-is-commutative (x ==> y) x ‚ü©‚Çö
         x ‚àß[ L ] (x ==> y)    ‚â§‚ü® ‚Ä†                                 ‚ü©
         y                     ‚ñ†

\end{code}
