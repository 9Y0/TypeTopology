Martin Escardo, started 5th May 2018

\begin{code}

module NaturalsOrder where

open import SpartanMLTT hiding (_โค_) hiding (โค-anti) public

_โค_ : โ โ โ โ Uโ ฬ
zero โค n        = ๐
succ m โค zero   = ๐
succ m โค succ n = m โค n

zero-minimal : (n : โ) โ zero โค n
zero-minimal n = *

succ-monotone : (m n : โ) โ m โค n โ succ m โค succ n
succ-monotone m n l = l

succ-order-injective : (m n : โ) โ succ m โค succ n โ m โค n 
succ-order-injective m n l = l

succโคโก : (m n : โ) โ (succ m โค succ n) โก (m โค n)
succโคโก m n = refl

โค-induction : {U : Universe} (P : (m n : โ) (l : m โค n) โ U ฬ)
            โ ((n : โ) โ P zero n (zero-minimal n))
            โ ((m n : โ) (l : m โค n) โ P m n l โ P (succ m) (succ n) (succ-monotone m n l)) 
            โ (m n : โ) (l : m โค n) โ P m n l 
โค-induction P base step zero n *            = base n
โค-induction P base step (succ m) zero ()
โค-induction P base step (succ m) (succ n) l = step m n l (โค-induction P base step m n l)

โค-refl : (n : โ) โ n โค n
โค-refl zero     = *
โค-refl (succ n) = โค-refl n

โค-trans : (l m n : โ) โ l โค m โ m โค n โ l โค n
โค-trans zero m n p q = *
โค-trans (succ l) zero n () q
โค-trans (succ l) (succ m) zero p ()
โค-trans (succ l) (succ m) (succ n) p q = โค-trans l m n p q

โค-anti : (m n : โ) โ m โค n โ n โค m โ m โก n
โค-anti zero zero p q = refl
โค-anti zero (succ n) p ()
โค-anti (succ m) zero () q
โค-anti (succ m) (succ n) p q = ap succ (โค-anti m n p q)

โค-succ : (n : โ) โ n โค succ n
โค-succ zero     = *
โค-succ (succ n) = โค-succ n

unique-minimal : (n : โ) โ n โค zero โ n โก zero
unique-minimal zero l = refl
unique-minimal (succ n) ()

โค-split : (m n : โ) โ m โค succ n โ (m โค n) + (m โก succ n)
โค-split zero n l = inl l
โค-split (succ m) zero l = inr (ap succ (unique-minimal m l))
โค-split (succ m) (succ n) l = cases inl (inr โ (ap succ)) (โค-split m n l)

โค-join : (m n : โ) โ (m โค n) + (m โก succ n) โ m โค succ n
โค-join m n (inl l) = โค-trans m n (succ n) l (โค-succ n)
โค-join .(succ n) n (inr refl) = โค-refl n

_<_ : โ โ โ โ Uโ ฬ
m < n = succ m โค n

not-less-bigger-or-equal : (m n : โ) โ ยฌ(n < m) โ m โค n
not-less-bigger-or-equal zero n u = zero-minimal n
not-less-bigger-or-equal (succ m) zero = double-negation-intro (zero-minimal m)
not-less-bigger-or-equal (succ m) (succ n) = not-less-bigger-or-equal m n

\end{code}
