Martin Escardo, 29 June 2018

The type Ordinals of ordinals in a universe U, and the subtype Ordinals·µÄ of
ordinals with a top element.

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT
open import UF-Base
open import UF-FunExt
open import UF-Subsingletons
open import UF-Subsingletons-FunExt
open import OrdinalNotions hiding (_‚â§_)
open import UF-Embedding

module Ordinals
       (fe : ‚àÄ U V ‚Üí funext U V)
       where

OrdinalStructure : U Ãá ‚Üí U ‚Å∫ Ãá
OrdinalStructure {U} X = Œ£ \(_<_ : X ‚Üí X ‚Üí U Ãá) ‚Üí is-well-order _<_

Ordinal : ‚àÄ U ‚Üí U ‚Å∫ Ãá
Ordinal U = Œ£ \(X : U Ãá) ‚Üí OrdinalStructure X

\end{code}

An ordinal is a type equipped with ordinal structure. Such a type is
automatically a set.

NB. Perhaps we will eventually need to have two parameters U (the
universe where the underlying type X lives) and V (the universe where
_<_ takes values in) for Ordinal.

Ordinals are ranged over by Œ±,Œ≤,Œ≥.

The underlying type of an ordinal (which happens to to be necessarily
a set):

\begin{code}

‚ü®_‚ü© : Ordinal U ‚Üí U Ãá
‚ü® X , _<_ , o ‚ü© = X

structure : (Œ± : Ordinal U) ‚Üí OrdinalStructure ‚ü® Œ± ‚ü©
structure (X , s) = s

underlying-order : (Œ± : Ordinal U) ‚Üí ‚ü® Œ± ‚ü© ‚Üí ‚ü® Œ± ‚ü© ‚Üí U Ãá
underlying-order (X , _<_ , o) = _<_

underlying-porder : (Œ± : Ordinal U) ‚Üí ‚ü® Œ± ‚ü© ‚Üí ‚ü® Œ± ‚ü© ‚Üí U Ãá
underlying-porder (X , _<_ , o) = _‚âº_ _<_

syntax underlying-order  Œ± x y = x ‚â∫‚ü® Œ± ‚ü© y
syntax underlying-porder Œ± x y = x ‚âº‚ü® Œ± ‚ü© y

is-well-ordered : (Œ± : Ordinal U) ‚Üí is-well-order (underlying-order Œ±)
is-well-ordered (X , _<_ , o) = o

Prop-valuedness : (Œ± : Ordinal U) ‚Üí is-prop-valued (underlying-order Œ±)
Prop-valuedness Œ± = prop-valuedness (underlying-order Œ±) (is-well-ordered Œ±)

Transitivity : (Œ± : Ordinal U) ‚Üí is-transitive (underlying-order Œ±)
Transitivity Œ± = transitivity (underlying-order Œ±) (is-well-ordered Œ±)

Well-foundedness : (Œ± : Ordinal U) (x : ‚ü® Œ± ‚ü©) ‚Üí is-accessible (underlying-order Œ±) x
Well-foundedness Œ± = well-foundedness (underlying-order Œ±) (is-well-ordered Œ±)

Extensionality : (Œ± : Ordinal U) ‚Üí is-extensional (underlying-order Œ±)
Extensionality Œ± = extensionality (underlying-order Œ±) (is-well-ordered Œ±)

\end{code}

To get closure under sums constructively, we need further
assumptions. Having a top element is a simple sufficient condition,
which holds in the applications we have in mind (for compact
ordinals).  Classically, these are the successor
ordinals. Constructively, ‚Ñï‚àû is an example of an ordinal with a top
element, which is not a successor ordinal, as its top element is not
isolated.

\begin{code}

Ordinal·µÄ : ‚àÄ U ‚Üí U ‚Å∫ Ãá
Ordinal·µÄ U = Œ£ \(Œ± : Ordinal U) ‚Üí has-top (underlying-order Œ±)

[_] : Ordinal·µÄ U ‚Üí Ordinal U
[ Œ± , t ] = Œ±

‚ü™_‚ü´ : Ordinal·µÄ U ‚Üí U Ãá
‚ü™ (X , _<_ , o) , t ‚ü´ = X

\end{code}

Topped ordinals are ranged over by œÑ,œÖ.

\begin{code}

tunderlying-order : (œÑ : Ordinal·µÄ U) ‚Üí ‚ü™ œÑ ‚ü´ ‚Üí ‚ü™ œÑ ‚ü´ ‚Üí U Ãá
tunderlying-order ((X , _<_ , o) , t) = _<_

syntax tunderlying-order œÑ x y = x ‚â∫‚ü™ œÑ ‚ü´ y

tunderlying-rorder : (œÑ : Ordinal·µÄ U) ‚Üí ‚ü™ œÑ ‚ü´ ‚Üí ‚ü™ œÑ ‚ü´ ‚Üí U Ãá
tunderlying-rorder œÑ x y = ¬¨(y ‚â∫‚ü™ œÑ ‚ü´ x)

syntax tunderlying-rorder œÑ x y = x ‚âº‚ü™ œÑ ‚ü´ y

‚âº-prop-valued : (œÑ : Ordinal·µÄ U) (x y : ‚ü™ œÑ ‚ü´) ‚Üí is-prop (x ‚âº‚ü™ œÑ ‚ü´ y)
‚âº-prop-valued {U} œÑ x y l m = dfunext (fe U U‚ÇÄ) (Œª x ‚Üí ùüò-elim (m x))

topped : (œÑ : Ordinal·µÄ U) ‚Üí has-top (tunderlying-order œÑ)
topped (Œ± , t) = t

top : (œÑ : Ordinal·µÄ U) ‚Üí ‚ü™ œÑ ‚ü´
top (Œ± , (x , i)) = x

top-is-top : (œÑ : Ordinal·µÄ U) ‚Üí is-top (tunderlying-order œÑ) (top œÑ)
top-is-top (Œ± , (x , i)) = i

tis-well-ordered : (œÑ : Ordinal·µÄ U) ‚Üí is-well-order (tunderlying-order œÑ)
tis-well-ordered ((X , _<_ , o) , t) = o

\end{code}
